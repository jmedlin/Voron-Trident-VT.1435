#####################################################################
#   Macros
#####################################################################
[gcode_macro list_sensors]
gcode:
  { action_respond_info(printer.heaters.available_heaters | join(', ')) }
  { action_respond_info(printer.heaters.available_sensors | join(', ')) }

[gcode_macro HEATSOAK]
gcode:
  SET_FAN_SPEED FAN=chamber_filter SPEED=1
  SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=110
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET=148

[gcode_macro PARK_TOOLHEAD_FRONT]
gcode:
  G1 X150 Y10 F6000

[gcode_macro PARK_TOOLHEAD_REAR]
gcode:
  G1 X150 Y300 F6000

[gcode_macro DUMP_VARIABLES]
gcode:
    {% set filter_name = params.NAME|default('')|string|lower %}
    {% set filter_value = params.VALUE|default('')|string|lower %}
    {% set show_cfg = params.SHOW_CFG|default(0)|int %}
    
    {% set out = [] %}

    {% for key1 in printer %}
        {% for key2 in printer[key1] %}
            {% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
                {% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
            {% endif %}
        {% else %}
            {% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
                {% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
            {% endif %}
        {% endfor %}
    {% endfor %}
    
    {action_respond_info(out|join("\n"))}
#####################################################################
#   print_start macro
#####################################################################

## *** THINGS TO UNCOMMENT: ***
## Bed mesh (2 lines at 2 locations)
## Z_TILT_ADJUST if your printer is a Trident
## Quad gantry level if your printer is a V2
## Nevermore - if you have one

[gcode_macro PRINT_START]
gcode:
  # This part fetches data from your slicer. Such as bed temp, extruder temp, chamber temp and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

  # DUMP_VARIABLES
  
  # Homes the printer, sets absolute positioning and updates the Stealthburner leds.
  # STATUS_HOMING         # Sets SB-leds to homing-mode
  RESPOND MSG="Homing..."
  G28                   # Full home (XYZ)
  G90                   # Absolut position

  ##  Uncomment for bed mesh (1 of 2)
  BED_MESH_CLEAR       # Clears old saved bed mesh (if any)

  # Checks if the bed temp is higher than 90c - if so then trigger a heatsoak.
  {% if params.BED|int > 90 %}
    SET_DISPLAY_TEXT MSG="Heating bed to {target_bed}c"           # Displays info
    RESPOND MSG="Heating bed to {target_bed}c"
    # STATUS_HEATING                                      # Sets SB-leds to heating-mode
    M106 S255                                           # Turns on the PT-fan

    
    SET_FAN_SPEED FAN=chamber_filter SPEED=1.0          # Turn on the Bento Box air filter       

    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Goes to center of the bed
    M190 S{target_bed}                                  # Sets the target temp for the bed
    SET_DISPLAY_TEXT MSG="Heatsoaking chamber to {target_chamber}c"  # Displays info
    RESPOND MSG="Heatsoaking chamber to {target_chamber}c"
    TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}   # Waits for chamber to reach desired temp
    
    SET_DISPLAY_TEXT MSG="Chamber heating complete."
    RESPOND MSG="Chamber heating complete."

  # If the bed temp is not over 90c, then it skips the heatsoak and just heats up to set temp with a 5min soak
  {% else %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Displays info
    # STATUS_HEATING                                      # Sets SB-leds to heating-mode
    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Goes to center of the bed
    M190 S{target_bed}                                  # Sets the target temp for the bed
    SET_DISPLAY_TEXT MSG="Soak for 5min"                # Displays info
    RESPOND MSG="Heatsoak Bed for 5min"
    G4 P300000                                          # Waits 5 min for the bedtemp to stabilize
  {% endif %}

  # Heating nozzle to 150 degrees. This helps with getting a correct Z-home
  SET_DISPLAY_TEXT MSG="Heating nozzle to 150c for probing"          # Displays info
  RESPOND MSG="Heating nozzle to 150c for probing"
  M109 S150                                    # Heats the nozzle to 150c

  ## Clean Nozzle
  CLEAN_NOZZLE

  ##  Uncomment for Trident (Z_TILT_ADJUST)
  SET_DISPLAY_TEXT MSG="Z-tilt adjust"     # Displays info
  RESPOND MSG="Z-tilt adjust"
  #STATUS_LEVELING                          # Sets SB-leds to leveling-mode
  Z_TILT_ADJUST                            # Levels the buildplate via z_tilt_adjust
  G28 Z                                    # Homes Z again after z_tilt_adjust

  ##  Uncomment for bed mesh (2 of 2)
  SET_DISPLAY_TEXT MSG="Bed mesh"    # Displays info
  #STATUS_MESHING                     # Sets SB-leds to bed mesh-mode
  RESPOND MSG="Bed Mesh Calibrating..."
  BED_MESH_CALIBRATE                 # Starts bed mesh
  RESPOND MSG="Bed Mesh Complete"

  # Heats up the nozzle up to target via data from slicer
  SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"             # Displays info
  # STATUS_HEATING                                                # Sets SB-leds to heating-mode
  RESPOND MSG="Heating nozzle to {target_extruder}c"
  G1 X{x_wait} Y{y_wait} Z15 F9000                              # Goes to center of the bed
  M107                                                          # Turns off partcooling fan
  M109 S{target_extruder}                                       # Heats the nozzle to printing temp

  # Gets ready to print by doing a purge line and updating the SB-leds
  SET_DISPLAY_TEXT MSG="Printer goes brr"          # Displays info
  RESPOND MSG="Printer goes brr"
  # STATUS_PRINTING                                  # Sets SB-leds to printing-mode
  RESPOND MSG="KAMP Line Purge..."
  LINE_PURGE                                         #KAMP Line Purge

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-2.0 F3600                 ; retract filament
    
    TURN_OFF_HEATERS
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing

    RESPOND MSG="Ejecting Filament..."
    G1 E-15 F3600                   ; Eject Filament
    
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                     ; turn off fan

    UPDATE_DELAYED_GCODE ID=filter_off DURATION=300 ; Run the Bento Box air filter for 5 min and turn it off
    
    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END