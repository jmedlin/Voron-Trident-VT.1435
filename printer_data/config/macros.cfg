#####################################################################
#   Macros
#####################################################################
[gcode_macro HOME]
gcode:
    G90
    # Home X
    G28 X0
    G1 X5 F1200
    G4 P2000
    
    # Home Y
    G28 Y0
    G1 Y5 F1200
    G4 P2000

    # Home Z
    G28 Z0
    G1 Z10 F1200
    
[gcode_macro list_sensors]
gcode:
  { action_respond_info(printer.heaters.available_heaters | join(', ')) }
  { action_respond_info(printer.heaters.available_sensors | join(', ')) }

[gcode_macro HEATSOAK]
gcode:
  SET_FAN_SPEED FAN=chamber_filter SPEED=1
  SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=110
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET=148

[gcode_macro PARK_TOOLHEAD_FRONT]
gcode:
  G1 X150 Y23 F6000

[gcode_macro PARK_TOOLHEAD_REAR]
gcode:
  G1 X150 Y300 F6000

[gcode_macro DUMP_VARIABLES]
gcode:
    {% set filter_name = params.NAME|default('')|string|lower %}
    {% set filter_value = params.VALUE|default('')|string|lower %}
    {% set show_cfg = params.SHOW_CFG|default(0)|int %}
    
    {% set out = [] %}

    {% for key1 in printer %}
        {% for key2 in printer[key1] %}
            {% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
                {% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
            {% endif %}
        {% else %}
            {% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
                {% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
            {% endif %}
        {% endfor %}
    {% endfor %}
    
    {action_respond_info(out|join("\n"))}
#####################################################################
#   print_start macro
#####################################################################

## *** THINGS TO UNCOMMENT: ***
## Bed mesh (2 lines at 2 locations)
## Z_TILT_ADJUST if your printer is a Trident
## Quad gantry level if your printer is a V2
## Nevermore - if you have one

[gcode_macro PRINT_START]
gcode:
  # This part fetches data from your slicer. Such as bed temp, extruder temp, chamber temp and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

  BED_MESH_CLEAR
  SET_GCODE_OFFSET Z=0
  
  # Homes the printer, sets absolute positioning and updates the Stealthburner leds.
  # STATUS_HOMING         # Sets SB-leds to homing-mode
  RESPOND MSG="Homing..."
  G28                   # Full home (XYZ)
  G0 Z2                 # Position beacon at 2mm for heat soak
  

  # Checks if the bed temp is higher than 90c - if so then trigger a heatsoak.
  {% if params.BED|int > 90 %}
    SET_DISPLAY_TEXT MSG="Heating bed to {target_bed}c"           # Displays info
    RESPOND MSG="Heating bed to {target_bed}c"
    # STATUS_HEATING                                      # Sets SB-leds to heating-mode
    M106 S255                                           # Turns on the PT-fan

    
    SET_FAN_SPEED FAN=chamber_filter SPEED=1.0          # Turn on the Bento Box air filter       

    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Goes to center of the bed
    M190 S{target_bed}                                  # Sets the target temp for the bed
    SET_DISPLAY_TEXT MSG="Heatsoaking chamber to {target_chamber}c"  # Displays info
    RESPOND MSG="Heatsoaking chamber to {target_chamber}c"
    TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}   # Waits for chamber to reach desired temp
    
    SET_DISPLAY_TEXT MSG="Chamber heating complete."
    RESPOND MSG="Chamber heating complete."

  # If the bed temp is not over 90c, then it skips the heatsoak and just heats up to set temp with a 5min soak
  {% else %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Displays info
    # STATUS_HEATING                                      # Sets SB-leds to heating-mode
    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Goes to center of the bed
    M190 S{target_bed}                                  # Sets the target temp for the bed
    SET_DISPLAY_TEXT MSG="Soak for 5min"                # Displays info
    RESPOND MSG="Heatsoak Bed for 5min"
    # G4 P300000                                          # Waits 5 min for the bedtemp to stabilize
  {% endif %}

  # Heating nozzle to 150 degrees. This helps with getting a correct Z-home
  SET_DISPLAY_TEXT MSG="Heating nozzle to 150c for probing"          # Displays info
  RESPOND MSG="Heating nozzle to 150c for probing"
  M109 S150                                    # Heats the nozzle to 150c

  ## Clean Nozzle
  #CLEAN_NOZZLE

  SET_DISPLAY_TEXT MSG="Z-tilt adjust"     # Displays info
  RESPOND MSG="Z-tilt adjust"
  G28 Z METHOD=CONTACT CALIBRATE=1    ; calibrate z offset and beacon model hot
  Z_TILT_ADJUST                       ; or QGL to balance towers
  BED_MESH_CALIBRATE RUNS=2           ; bed mesh in scan mode

  ## Clean Nozzle
  #CLEAN_NOZZLE
  
  G28 Z METHOD=CONTACT CALIBRATE=0    ; calibrate z offset only after tilt/mesh

  # Heats up the nozzle up to target via data from slicer
  SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"             # Displays info
  # STATUS_HEATING                                                # Sets SB-leds to heating-mode
  RESPOND MSG="Heating nozzle to {target_extruder}c"
  G1 X{x_wait} Y{y_wait} Z15 F9000                              # Goes to center of the bed
  M107                                                          # Turns off partcooling fan
  M109 S{target_extruder}                                       # Heats the nozzle to printing temp

  SET_GCODE_OFFSET Z=0.04     ; add a little offset for hotend thermal expansion
                            ; needs fine tuning, long meltzones require more
  #SET_GCODE_OFFSET Z_ADJUST={OFFSET}  ; apply optional material squish via slicer

  # Gets ready to print by doing a purge line and updating the SB-leds
  SET_DISPLAY_TEXT MSG="Printer goes brr"          # Displays info
  RESPOND MSG="Printer goes brr"
  # STATUS_PRINTING                                  # Sets SB-leds to printing-mode
  RESPOND MSG="KAMP Line Purge..."
  LINE_PURGE                                         #KAMP Line Purge

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-2.0 F3600                 ; retract filament
    
    TURN_OFF_HEATERS
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing

    RESPOND MSG="Ejecting Filament..."
    G1 E-15 F3600                   ; Eject Filament
    
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 15} F3600  ; park nozzle at rear
    M107                                     ; turn off fan

    UPDATE_DELAYED_GCODE ID=filter_off DURATION=300 ; Run the Bento Box air filter for 5 min and turn it off

    #Move Z to 100mm if its less than 100mm above the bed
    {% if th.position.z < 100 %}
      G0 Z100
    {% endif %}

    M84 ; turn off motors
    
    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END

######################################################################
# Pause and Resume Macros
######################################################################
[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

        SET_FILAMENT_SENSOR SENSOR=sfs_encoder_sensor ENABLE=0                                   ; disable filament sensor
        SET_FILAMENT_SENSOR SENSOR=sfs_switch_sensor ENABLE=0                                    ; disable filament sensor
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        M104 S0                                                                              ; turn off hotend

        # RESPOND MSG="Ejecting Filament..."
        # G1 E-15 F3600                   ; Eject Filament
    
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)

    {% if printer['pause_resume'].is_paused|int == 1 %}
        SET_FILAMENT_SENSOR SENSOR=sfs_encoder_sensor ENABLE=1                            ; enable filament sensor
        SET_FILAMENT_SENSOR SENSOR=sfs_switch_sensor ENABLE=1                             ; enable filament sensor
        #INITIAL_RGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}

[gcode_macro PAUSE_TOOL_CHANGE]
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

        SET_FILAMENT_SENSOR SENSOR=sfs_encoder_sensor ENABLE=0                                   ; disable filament sensor
        SET_FILAMENT_SENSOR SENSOR=sfs_switch_sensor ENABLE=0                                    ; disable filament sensor
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        #M104 S0                                                                              ; turn off hotend

        #RESPOND MSG="Ejecting filament for tool change..."
        G1 E-15 F3600                   ; Eject Filament
    
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}

[gcode_macro PARKCENTER]
gcode:
    {% set Z = params.Z|default(30)|float %}
    SAVE_GCODE_STATE NAME=PARKCENTER_state
    G28                          ; Home if not already homed
    G90                            ; absolute positioning
    G0 X150 Y150 Z{Z} F12000       ; move to center
    RESTORE_GCODE_STATE NAME=PARKCENTER_state

[gcode_macro LOAD_FILAMENT]
variable_load_distance:  70
variable_purge_distance:  50
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=load_state
    G91
    G92 E0
    G1 E{load_distance} F{max_velocity} # fast-load
    G1 E{purge_distance} F{speed} # purge
    RESTORE_GCODE_STATE NAME=load_state

[gcode_macro UNLOAD_FILAMENT]
variable_unload_distance:  70
variable_purge_distance:  25
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=unload_state
    G91
    G92 E0
    G1 E{purge_distance} F{speed} # purge
    G1 E-{unload_distance} F{max_velocity} # fast-unload
    RESTORE_GCODE_STATE NAME=unload_state